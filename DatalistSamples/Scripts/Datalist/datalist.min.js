/*!
 * Datalist 3.0.2
 * https://github.com/NonFactors/MVC.Datalist
 *
 * Copyright © 2014 NonFactors
 *
 * Licensed under the terms of the MIT License
 * http://www.opensource.org/licenses/mit-license.php
 */
!function (a) { a.widget("mvc.datalist", { _create: function () { this.element.hasClass("datalist-input") && (this._initOptions(), this._initFilters(), this._initAutocomplete(), this._initDatalistOpenSpan(), this._loadSelected(), this._cleanUp()) }, _initOptions: function () { var b = this.element, c = this.options; c.hiddenElement = a("#" + b.attr("data-datalist-hidden-input"))[0], c.recordsPerPage = b.attr("data-datalist-records-per-page"), c.filters = b.attr("data-datalist-filters").split(","), c.sortColumn = b.attr("data-datalist-sort-column"), c.sortOrder = b.attr("data-datalist-sort-order"), c.title = b.attr("data-datalist-dialog-title"), c.term = b.attr("data-datalist-term"), c.page = parseInt(b.attr("data-datalist-page")), c.url = b.attr("data-datalist-url"), b.addClass("mvc-datalist") }, _initFilters: function () { for (i = 0; i < this.options.filters.length; i++) this._initFilter(a("#" + this.options.filters[i])) }, _initFilter: function (b) { var c = this; c._on(b, { change: function () { var d = a.Event(c._select); c.options.filterChange && c.options.filterChange(d, c.element[0], c.options.hiddenElement, b[0]), d.isDefaultPrevented() || c._select(null) } }) }, _initAutocomplete: function () { var b = this; this.element.autocomplete({ source: function (c, d) { a.ajax({ url: b._formAutocompleteUrl(c.term), success: function (b) { d(a.map(b.Rows, function (a) { return { label: a.DatalistAcKey, value: a.DatalistAcKey, item: a } })) } }) }, select: function (a, c) { b._select(c.item.item) }, minLength: 1 }), this.element.bind("keyup.datalist", function () { 0 == this.value.length && b._select(null) }), this.element.prevAll(".ui-helper-hidden-accessible").remove() }, _initDatalistOpenSpan: function () { var b = this.element.nextAll(".datalist-open-span:first"); if (0 != b.length) { var c = a("#Datalist"), d = this; this._on(b, { click: function () { c.find(".datalist-search-input").unbind("keyup.datalist").bindWithDelay("keyup.datalist", function () { d.options.term = this.value, d.options.page = 0, d._update(c) }, 500, !1).val(d.options.term), c.find(".datalist-items-per-page").spinner({ change: function () { this.value = d._limitTo(this.value, 1, 99), d.options.recordsPerPage = this.value, d.options.page = 0, d._update(c) } }).val(d._limitTo(d.options.recordsPerPage, 1, 99)), c.find(".datalist-search-input").attr("placeholder", a.fn.datalist.lang.Search), c.find(".datalist-error-span").html(a.fn.datalist.lang.Error), c.dialog("option", "title", d.options.title), c.find(".datalist-table-head").empty(), c.find(".datalist-table-body").empty(), c.dialog("open"), d._update(c) } }) } }, _formAutocompleteUrl: function (a) { return this.options.url + "?SearchTerm=" + a + "&RecordsPerPage=20" + "&SortOrder=Asc" + "&Page=0" + this._formFiltersQuery() }, _formDatalistUrl: function (a) { return this.options.url + "?SearchTerm=" + a + "&RecordsPerPage=" + this.options.recordsPerPage + "&SortColumn=" + this.options.sortColumn + "&SortOrder=" + this.options.sortOrder + "&Page=" + this.options.page + this._formFiltersQuery() }, _formFiltersQuery: function () { var b = ""; for (i = 0; i < this.options.filters.length; i++) { var c = a("#" + this.options.filters[i]); 1 == c.length && (b += "&" + this.options.filters[i] + "=" + c.val()) } return b }, _defaultSelect: function (b) { b ? (a(this.options.hiddenElement).val(b.DatalistIdKey).change(), a(this.element).val(b.DatalistAcKey).change()) : (a(this.element).val(null).change(), a(this.options.hiddenElement).val(null).change()) }, _loadSelected: function () { var b = this, c = a(b.options.hiddenElement).val(); c && a.ajax({ url: b.options.url + "?Id=" + c + "&RecordsPerPage=1", cache: !1, success: function (a) { a.Rows.length > 0 && b._select(a.Rows[0]) } }) }, _select: function (b) { var c = a.Event(this._defaultSelect); this.options.select && this.options.select(c, this.element[0], this.options.hiddenElement, b), c.isDefaultPrevented() || this._defaultSelect(b) }, _limitTo: function (a) { return a = parseInt(a), isNaN(a) ? 20 : 1 > a ? 1 : a > 99 ? 99 : a }, _cleanUp: function () { this.element.removeAttr("data-datalist-records-per-page"), this.element.removeAttr("data-datalist-dialog-title"), this.element.removeAttr("data-datalist-hidden-input"), this.element.removeAttr("data-datalist-sort-column"), this.element.removeAttr("data-datalist-sort-order"), this.element.removeAttr("data-datalist-filters"), this.element.removeAttr("data-datalist-term"), this.element.removeAttr("data-datalist-page"), this.element.removeAttr("data-datalist-url") }, _update: function (b) { var c = this, d = b.find(".datalist-search-input").val(); b.find(".datalist-error").fadeOut(300); var e = setTimeout(function () { b.find(".datalist-processing").fadeIn(300), b.find(".datalist-data").fadeOut(300) }, 500); a.ajax({ url: c._formDatalistUrl(d), cache: !1, success: function (a) { c._updateHeader(b, a.Columns), c._updateData(b, a), c._updateNavbar(b, a.FilteredRecords), clearTimeout(e), b.find(".datalist-processing").fadeOut(300), b.find(".datalist-pager").fadeIn(300), b.find(".datalist-data").fadeIn(300) }, error: function () { clearTimeout(e), b.find(".datalist-processing").fadeOut(300), b.find(".datalist-pager").fadeOut(300), b.find(".datalist-data").fadeOut(300), b.find(".datalist-error").fadeIn(300) } }) }, _updateHeader: function (b, c) { var d = this, e = "", f = 0; a.each(c, function (a, b) { e += '<th class="' + (null != b.CssClass ? b.CssClass : "") + '" data-column="' + b.Key + '">' + (null != b.Header ? b.Header : ""), (d.options.sortColumn == b.Key || "" == d.options.sortColumn && 0 == f) && (e += '<span class="datalist-sort-arrow glyphicon glyphicon-arrow-' + ("Asc" == d.options.sortOrder ? "down" : "up") + '"></span>', d.options.sortColumn = b.Key), e += "</th>", f++ }), b.find(".datalist-table-head").html("<tr>" + e + '<th class="datalist-select-header"></th></tr>'), b.find(".datalist-table-head th").click(function () { var c = a(this); return c.attr("data-column") ? (d.options.sortOrder = d.options.sortColumn == c.attr("data-column") ? "Asc" == d.options.sortOrder ? "Desc" : "Asc" : "Asc", d.options.sortColumn = c.attr("data-column"), d._update(b), void 0) : !1 }) }, _updateData: function (b, c) { if (0 == c.Rows.length) return b.find(".datalist-table-body").html('<tr><td colspan="0" style="text-align: center">' + a.fn.datalist.lang.NoDataFound + "</td></tr>"), void 0; for (var d = "", e = 0; e < c.Rows.length; e++) { var f = "<tr>", g = c.Rows[e]; a.each(c.Columns, function (a, b) { f += '<td class="' + (null != b.CssClass ? b.CssClass : "") + '">' + (null != g[b.Key] ? g[b.Key] : "") + "</td>" }), f += '<td class="datalist-select-cell"><div class="datalist-select-container"><i class="glyphicon glyphicon-ok"></i></div></td></tr>', d += f } b.find(".datalist-table-body").html(d); for (var h = b.find("td.datalist-select-cell"), e = 0; e < h.length; e++) this._bindSelect(b, h[e], c.Rows[e]) }, _updateNavbar: function (a, b) { var c = this, d = a.find(".datalist-items-per-page").val(), e = parseInt(b / d) + 1; 0 == b % d && e--, 0 == e ? a.find(".datalist-pager > .pagination").empty() : a.find(".datalist-pager > .pagination").bootstrapPaginator({ currentPage: c.options.page + 1, bootstrapMajorVersion: 3, totalPages: e, onPageChanged: function (b, d, e) { c.options.page = e - 1, c._update(a) }, tooltipTitles: function () { return "" }, itemTexts: function (a, b) { switch (a) { case "first": return "&laquo;"; case "prev": return "&lsaquo;"; case "next": return "&rsaquo;"; case "last": return "&raquo;"; case "page": return b } } }) }, _bindSelect: function (a, b, c) { var d = this; d._on(b, { click: function () { a.dialog("close"), d._select(c) } }) }, _destroy: function () { var a = this.element, b = this.options; return a.attr("data-datalist-records-per-page", b.recordsPerPage), a.attr("data-datalist-hidden-input", b.hiddenElement.id), a.attr("data-datalist-filters", b.filters.join()), a.attr("data-datalist-sort-column", b.sortColumn), a.attr("data-datalist-sort-order", b.sortOrder), a.attr("data-datalist-dialog-title", b.title), a.attr("data-datalist-term", b.term), a.attr("data-datalist-page", b.page), a.attr("data-datalist-url", b.url), a.removeClass("mvc-datalist"), a.autocomplete("destroy"), this._super() } }) }(jQuery), function (a) { a.fn.datalist.lang = { Error: "Error while retrieving records", NoDataFound: "No data found", Search: "Search..." }; var b = a("#Datalist"); b.find(".datalist-items-per-page").spinner({ min: 1, max: 99 }).parent().addClass("input-group-addon"), b.dialog({ autoOpen: !1, minHeight: 210, height: "auto", minWidth: 455, width: "auto", modal: !0 }) }(jQuery);